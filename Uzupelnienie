# -*- coding: utf-8 -*-

import sqlite3
from datetime import datetime

#
# Ścieżka połączenia z bazą danych
#
db_path = 'budowa12.db'

#
# Wyjątek używany w repozytorium
#
class RepositoryException(Exception):
    def __init__(self, message, *errors):
        Exception.__init__(self, message)
        self.errors = errors


#
# Model danych
#
class Budowa():
    """Model pojedynczej faktury
    """
    def __init__(self, id, date=datetime.now(), adres=(), pracownicy=[]):
        self.id = id
        self.date = date
        self.adres = adres
        self.pracownicy = pracownicy

    def __repr__(self):
        return "<Budowa(id='%s', date='%s', items='%s')>" % (
                    self.id, self.date, self.pracownicy
                )


class WpisItem():
    """Model pozycji na fakturze. Występuje tylko wewnątrz obiektu Ksiazka.
    """
    def __init__(self, name, nazwisko, numer, ulica, nrdomu, nrmieszkania, miasto):
        self.name = name
        self.nazwisko = nazwisko
        self.numer = numer
        self.ulica = ulica
        self.nrdomu = nrdomu
        self.nrmieszkania = nrmieszkania
        self.miasto = miasto

    def __repr__(self):
        return "<WpisItem(name='%s', nazwisko='%s', numer='%s', ulica='%s', nrdomu='%s', nrmieszkania='%s', miasto='%s')>" % (
                    self.name, str(self.nazwisko), str(self.numer), self.ulica, self.nrdomu, self.nrmieszkania, self.miasto
                )


#
# Klasa bazowa repozytorium
#
class Repository():
    def __init__(self):
        try:
            self.conn = self.get_connection()
        except Exception as e:
            raise RepositoryException('GET CONNECTION:', *e.args)
        self._complete = False

    # wejście do with ... as ...
    def __enter__(self):
        return self

    # wyjście z with ... as ...
    def __exit__(self, type_, value, traceback):
        self.close()

    def complete(self):
        self._complete = True

    def get_connection(self):
        return sqlite3.connect(db_path)

    def close(self):
        if self.conn:
            try:
                if self._complete:
                    self.conn.commit()
                else:
                    self.conn.rollback()
            except Exception as e:
                raise RepositoryException(*e.args)
            finally:
                try:
                    self.conn.close()
                except Exception as e:
                    raise RepositoryException(*e.args)

#
# repozytorium obiektow typu Ksiazka
#
class BudowaRepository(Repository):

    def add(self, budowa):
        """Metoda dodaje pojedynczą fakturę do bazy danych,
        wraz ze wszystkimi jej pozycjami.
        """
        try:
            c = self.conn.cursor()
            # zapisz nagłowek faktury
            # nazwisko = sum([item.nazwisko*item.numer for item in ksiazka.wpisy])
            c.execute('INSERT INTO Budowa (id, wpis_date, adres) VALUES(?, ?, ?)',
                        (budowa.id, str(budowa.date), budowa.adres)
                    )
            # zapisz pozycje faktury
            if budowa.pracownicy:
                for wpisitem in budowa.pracownicy:
                    try:
                        c.execute('INSERT INTO Pracownicy (name, nazwisko, numer, ulica, nrdomu, nrmieszkania, miasto, budowa_id) VALUES(?,?,?,?,?,?,?,?)',
                                        (wpisitem.name, wpisitem.nazwisko, wpisitem.numer, wpisitem.ulica, wpisitem.nrdomu, wpisitem.nrmieszkania, wpisitem.miasto, budowa.id)
                                )
                    except Exception as e:
                        #print "item add error:", e
                        raise RepositoryException('error adding budowa item: %s, to budowa: %s' %
                                                    (str(wpisitem), str(budowa.id))
                                                )
        except Exception as e:
            #print "ksiazka add error:", e
            raise RepositoryException('error adding budowa %s' % str(budowa))

    def delete(self, budowa):
        """Metoda usuwa pojedynczą fakturę z bazy danych,
        wraz ze wszystkimi jej pozycjami.
        """
        try:
            c = self.conn.cursor()
            # usuń pozycje
            c.execute('DELETE FROM Pracownicy WHERE budowa_id=?', (budowa.id,))
            # usuń nagłowek
            c.execute('DELETE FROM Budowa WHERE id=?', (budowa.id,))

        except Exception as e:
            #print "ksiazka delete error:", e
            raise RepositoryException('error deleting budowa %s' % str(budowa))

    def getById(self, id):
        """Get budowaa by id
        """
        try:
            c = self.conn.cursor()
            c.execute("SELECT * FROM Budowa WHERE id=?", (id,))
            wpis_row = c.fetchone()
            budowa = Budowa(id=id)
            if wpis_row == None:
                budowa=None
            else:
                budowa.date = wpis_row[1]
                c.execute("SELECT * FROM Wpisy WHERE budowa_id=? order by name", (id,))
                wpis_items_rows = c.fetchall()
                items_list = []
                for item_row in wpis_items_rows:
                    item = WpisItem(name=item_row[0], nazwisko=item_row[1], numer=item_row[2], ulica=item_row[3], nrdomu=item_row[4], nrmieszkania=item_row[5], miasto=item_row[6])
                    items_list.append(item)
                budowa.pracownicy=items_list
        except Exception as e:
            #print "ksiazka getById error:", e
            raise RepositoryException('error getting by id budowa_id: %s' % str(id))
        return budowa

    def update(self, budowa):
        """Metoda uaktualnia pojedynczą fakturę w bazie danych,
        wraz ze wszystkimi jej pozycjami.
        """
        try:
            # pobierz z bazy fakturę
            wpis_oryg = self.getById(budowa.id)
            if wpis_oryg != None:
                # faktura jest w bazie: usuń ją
                self.delete(budowa)
            self.add(budowa)

        except Exception as e:
            #print "ksiazka update error:", e
            raise RepositoryException('error updating budowa %s' % str(budowa))



if __name__ == '__main__':
    try:
        with BudowaRepository() as budowa_repository:
            budowa_repository.add(
                Budowa(id = 1, date = datetime.now(), adres='Olchowa',
                        pracownicy = [
                            WpisItem(name = "Andrzj",   nazwisko = 'Trybala', numer = 1, ulica = 'Mistrowszka', nrdomu='21', nrmieszkania='1', miasto='Gdansk'),
                            WpisItem(name = "Krystian",   nazwisko = 'Kominternowski', numer = 2, ulica = 'Zwyciestwa', nrdomu='19', nrmieszkania='2', miasto='Gdansk'),
                            WpisItem(name = "Bernard",   nazwisko = 'Gwardyjski', numer = 3, ulica = 'Walki', nrdomu='3', nrmieszkania='40', miasto='Gdansk'),
                            WpisItem(name = "Tomasz",   nazwisko = 'Wojowniczy', numer = 4, ulica = 'Porywcza', nrdomu='1', nrmieszkania='150', miasto='Gdansk'),
                            WpisItem(name = "Wojciech",   nazwisko = 'Bezsensowny', numer = 5, ulica = 'Przegrana', nrdomu='2', nrmieszkania='1', miasto='Gdansk')
                        ]
                    )
                )
            budowa_repository.complete()
    except RepositoryException as e:
        print(e)

    print BudowaRepository().getById(1)
